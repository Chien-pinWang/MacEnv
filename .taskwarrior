
alias tToday='echo "TASKS DUE TODAY..."; task +TODAY mylist'
alias tSummary='task burndown; task ghistory; task projects'
alias tJob='tDepends 89445668-6919-436e-b16f-1f3c897d7fd5'

alias tasks="echo -e '\033[31;107mACTIVE TASKS:\033[39;49m'; task rc.dateformat:'a m/d' +ACTIVE mylist"
alias review="echo -e '\033[31;107mTASKS SCHEDULED TODAY:\033[39;49m'; task schedule.before:now -ACTIVE mylist"
alias weekload="echo -e '\033[31;107mUPCOMING IN A WEEK:\033[39;49m'; task rc.dateformat:'a m/d' weekload"
alias next="echo -e '\033[31;107mNEXT TASKS:\033[39;49m'; task mynext"
alias later="echo -e '\033[31;107mCOMING LATER:\033[39;49m'; task schedule.after:today+1y mylist" 
alias inbox="echo -e '\033[31;107mTASK INBOX:\033[39;49m'; task due: schedule: start: project: mylist"
alias waiting="echo -e '\033[31;107mWAITING TASKS:\033[39;49m'; task waiting"
alias due="echo -e '\033[31;107mTASKS DUE THIS WEEK...\033[39;49m'; task +WEEK mylist"
alias overdue="echo -e '\033[31;107mTASKS OVERDUE...\033[39;49m'; task +OVERDUE -TODAY mylist"
alias bill="echo -e '\033[31;107mBILLS TO PAY THIS MONTH...\033[39;49m'; task mybill"
alias t="task ls"
alias cal="task calendar"

export TASKPATH=~/prj/MacBookPro/.task
export TASK=$TASKPATH/pending.data

# checkTaskChange checks if the task file has been changed. Once a change
# is detected, several real-time todo reports, such as the tasks report, are
# updated accordingly. I can check them on the go at mobile phone.
# This function should be invoked and executed at the background.
function checkTaskChange () {
    m1=$(/sbin/md5 -q "$TASK")

    # To prevent running multiple instances of the checkTaskChange
    # processes when open multiple terminals, check if the sleep process is
    # already running. Run the while loop if not
    psCount=$(ps | grep "sleep 60" | wc -l)

    while [ $psCount -eq 1 ]
    do
        sleep 60
        m2=$(/sbin/md5 -q "$TASK")
        if [ "$m1" != "$m2" ]
        then

            echo "Currently Active:" > $TASKPATH/active.txt
            task rc.detection:off rc.defaultwidth:38 rc.verbose=label rc.dateformat=a +ACTIVE mylist_narrow >> $TASKPATH/active.txt

            echo "" >> $TASKPATH/active.txt
            echo "7-Day Look Ahead:" >> $TASKPATH/active.txt
            task rc.detection:off rc.defaultwidth:38 rc.verbose=label rc.dateformat=a weekload_narrow >> $TASKPATH/active.txt

            echo "" >> $TASKPATH/active.txt
            echo "Inbox:" >> $TASKPATH/active.txt
            task rc.detection:off rc.defaultwidth:38 rc.verbose=label rc.dateformat=a due: project: schedule: start: mylist >> $TASKPATH/active.txt

            m1="$m2"
        fi
    done
}

function _getTaskInfo () {
    arr=("$@")
    for elem in "${arr[@]}"
    do 
        echo "Debug: $elem"
    done
    if [[ $arr[0] == *[^[:digit:]]* ]]
    then
        echo "First argument needs to be a number!"
    else
        echo "${arr[3]} ${arr[2]} ${arr[1]} ${arr[0]}"
    fi
}

function t?() {
    while read line
        do
            echo -e "$line"
        done < ~/prj/MacBookPro/.task/tHint.txt
}

function qa () {
    if [ -z "$1" ]
    then
        echo "Usage: qa <Task Description> to quickly add a task"
        return 1
    else
        task add "$1"
        inbox
    fi
}

function checkoff () {                   #Complete task
    if [ -z "$1" ]
    then
        echo "Usage: checkoff <ID> to mark task <ID> as completed"
    else
        for tID in $@
        do
            taskDescription=$(task _get "$tID".description)
            read -p "Complete task <$taskDescription> (Y/n)?" -n 1 confirm
            echo ""
            if [ "$confirm" == "" ] || [ "$confirm" == "y" ] || [ "$confirm" == "Y" ]
            then
                task "$tID" done
                echo "Task <$taskDescription> is done."
            else
                echo "Task <$taskDescription> is not affected."
            fi
        done
        tasks
    fi
}

function project () {
    if [ -z "$1" ]
    then
        echo "Usage: project <Name> to show tasks in this project"
        return 1
    else
        task project:"$1" mylist
    fi
}

function tag () {
    if [ -z "$1" ]
    then
        echo "Usage: tag <Name> to show tasks with this tag"
        return 1
    else
        task +"$1" mylist
    fi
}

function boost () {                  # Add the "next" tag to boost urgency
    if [ -z "$1" ]
    then
        echo "Usage: boost <ID> to increase task urgency by +next"
        return 1
    else
        task "$1" modify +next
        tasks
    fi
}

function annotate () {
    if [ -z "$1" ] || [ -z "$2" ]
    then
        echo "Usage: annotate <ID> <annotation> to add note to task <ID>"
        return 1
    fi

    task "$1" annotate "$2"
    task "$1" mylist
}

function denotate () {
    if [ -z "$1" ] || [ -z "$2" ]
    then
        echo "Usage: denotate <ID> <denotation> to remove note from task <ID>"
        return 1
    fi

    task "$1" denotate "$2"
    task "$1" mylist
}

function pushoff () {                   #Push 1 Day
    if [ -z "$1" ]
    then
        echo "Usage: pushoff <ID> <days> to re-schedule task <ID> to <days> days from today"
        return 1
    else 
        tID="$1"
    fi

    if [ -z "$2" ]
    then
        pushDays=1
    else
        pushDays="$2"
    fi

    echo "Re-schedule this task to $pushDays from today:"
    taskDescription=$(task _get "$tID".description)
    taskScheduled=$(task _get "$tID".scheduled)
    echo "Task $taskDescription originally scheduled for $taskScheduled"
    read -p "Is this correct (Y/n)? " -n 1 confirm
    echo ""
    if [ "$confirm" == "" ] || [ "$confirm" == "y" ] || [ "$confirm" == "Y" ]
    then
        task "$tID" modify schedule:today+"$pushDays"d start:
        taskScheduled=$(task _get "$tID".scheduled)
        echo "Task $taskDescription now scheduled for $taskScheduled"
    else
        echo "Task <$taskDescription> is not affected."
    fi
    review
}

function tDepends () {
    # Check sufficiency of command line argument
    if [[ -z $1 ]]
    then
        echo "Usage: tDepends <ID>."
        return 0
    fi

    # Check if $1 is task ID or UUID
    taskID="$1"
    if [[ ${#taskID} -lt 5 ]]
    then
        taskID=$(task _get "$taskID".uuid)
        # echo "Debug Point 1"
    fi

    local level=0
    # $level is used to left-pad task description shoing proper indentaton
    # of sub-tasks. This is passed when program is invoked recurrsively.
    if [[ ! -z $2 ]]
    then
        level="$2"
    else
        # Called directly from command line. Show report header
        level="0"
        # Print report header
        printf "\033[4m%3s\033[0m \033[4m%1s\033[0m \033[4m%-12s\033[0m \033[4m%-50s\033[0m \033[4m%10s\033[0m\n" "ID" "S" "Project" "Task Description" "Due"
    fi

    # Get task attributes from taskwarrior using the _get function
    taskTaskID=$(task _get "$taskID".id)
    taskProject=$(task _get "$taskID".project)
    taskDescription=$(task _get "$taskID".description)
    taskDepends=$(task _get "$taskID".depends)
    taskStatus=$(task _get "$taskID".status)
    taskBlocking=$(task _get "$taskID".tags.BLOCKING)
    taskDueYear=$(task _get "$taskID".due.year)
    taskDueMonth=$(task _get "$taskID".due.month)
    taskDueDay=$(task _get "$taskID".due.day)
    taskActive=$(task _get "$taskID".tags.ACTIVE)

    # Convert status to status indicator
    case $taskStatus in
        "completed")
            taskStatus="C"
            ;;
        "deleted")
            taskStatus="D"
            ;;
        "pending")
            taskStatus="P"
            ;;
        "recurring")
            taskStatus="R"
            ;;
        "waiting")
            taskStatus="W"
            ;;
    esac

    # Pad task description based on the $level deep of the sub-task
    pads=""
    count=0
    if [[ $level -ge 1 ]]
    then
        count=$((level*2))
        # for i in $(seq 1 $count)
        # for i in {1..$count}
        for (( i=0; i<$count; i++ ))
        do
            pads=" $pads"
        done
    fi

    # Red the task if it is actively being worked
    local red=""
    local unred=""
    if [[ "$taskActive" == "ACTIVE" ]]
    then
        red="\033[31m"
        unred="\033[0m"
    fi

    # Dim the task if it is completed
    local dim=""
    local undim=""
    if [[ "$taskStatus" == "C" ]]
    then
        dim="\033[90m"
        undim="\033[0m"
    fi

    # Gray out the task if it is deleted
    local gray=""
    local ungray=""
    if [[ "$taskStatus" == "D" ]]
    then
        gray="\033[2;47m"
        ungray="\033[0m"
    fi

    # Brighten the task if it is not blocking any other tasks (goal task)
    local bright=""
    local unbright=""
    if [[ "$taskBlocking" == "" ]]
    then
        bright="\033[1m"
        unbright="\033[0m"
    fi

    if [[ "$taskDueYear" != "1970" ]]
    then
        taskDueDate="$taskDueYear-$taskDueMonth-$taskDueDay"
    else
        taskDueDate=""
    fi

    # Fix lengthy taskDescription with ...
    taskDescription="$pads$taskDescription"
    tDlength=${#taskDescription}
    if [ tDlength > 50 ]
    then
        taskDescription="${taskDescription:0:47}..."
    fi

    # Print report content if task is not the recurring parent
    if [ "$taskStatus" != "R" ]
    then
        printf "$red$gray$bright$dim%3s %1s %-12s %-50s %10s$unred$ungray$unbright$undim\n" "$taskTaskID" "$taskStatus" "$taskProject" "$taskDescription" "$taskDueDate"

        # If this task depends on other tasks...
        if [[ ! -z $taskDepends ]]
        then
            # Breaks comma-delimmited list $taskDepends to array $UUIDs
            # Set 'Internal Field Seperator (IFS)' to comma
            IFS=','
            read -r -a UUIDs <<<"$taskDepends"
            level=$((level+1))
            for UUID in "${UUIDs[@]}"
            do
                # Call self to go down one level deep
                # ~/tmp/tDepends.sh "$UUID" "$level"
                tDepends "$UUID" "$level"
            done
        fi
    fi

    # If this task does not have dependencies, return 0 to the caller program
    return 0
}

function newtask () {
    local taskname
    local taskdue
    local taskstart
    local taskproject

    task calendar

    while [ -z $taskname ]
    do
        read -p "Task to complete*: " taskname
    done
    read -p "Task due (YYYY-MM-DD): " taskdue
    read -p "Schedule to start (YYYY-MM-DD, or relative to due): " taskstart
    read -p "Project of the task: " taskproject
    read -p "Tag the task with +tag: " tasktags

    if [ -z $taskproject ]
    then
        projectclause=""
    else
        projectclause="project:$taskproject"
    fi

    if [ -z $taskdue ]
    then
        dueclause=""
    else
        dueclause="due:$taskdue"
    fi

    if [ -z $taskstart ]
    then
        scheduleclause=""
    else
        scheduleclause="schedule:$taskstart"
    fi

    task add "$projectclause" "$tasktags" "$taskname" "$dueclause" "$scheduleclause"
}

function start () {                      # Start a task
    if [ -z "$1" ]
    then
        echo "Usage: start <ID> to start a task"
        exit 1
    else
        task "$1" start
        tasks
    fi
}

function stop () {                       # Stop a task
    if [ -z "$1" ]
    then
        echo "Usage: stop <taskID> to stop a task"
        exit 1
    else
        task "$1" stop
        review
    fi
}

checkTaskChange &
